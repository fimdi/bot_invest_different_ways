const data = require('./data.json');
const config = require('./config.json');
const utils = require('./utils.js');

const { VK, Keyboard } = require('vk-io');
const { QuestionManager } = require('vk-io-question');
const mysql = require('mysql2/promise');
var CronJob = require('cron').CronJob;

const pool = mysql.createPool({
    host: '141.8.195.65',
    port: 3306,
    user: 'a0672554_Victor',
    password: '59rFx2RvVPGDZ9bq',
    database: 'a0672554_investing_DW_Victor',
	charset: 'utf8mb4_general_ci'
});
const vk = new VK({
	token: config.group_token,
	pollingGroupId: config.group_id,
	apiMode: 'parallel_selected'
});

const questionManager = new QuestionManager();
vk.updates.use(questionManager.middleware);

async function everyDay()
{
	const millisecondsInDay = 86400000;
	let daysPassed = Math.floor( (Date.now() - data.onlineDate) / millisecondsInDay );
	if ( daysPassed < 1 ) return;

	data.statistics.newUsers = 0;
	data.statistics.weWork += 1;

	await pool.query('UPDATE users SET attemptsSteal = 1 WHERE attemptsSteal = 0');
	await pool.query('UPDATE users SET protection = false WHERE protection = true');
	pool.query(`
	UPDATE 
		users u, 
		usersInvestmentMethods i
	SET
		u.balanceForWithdrawal = u.balanceForWithdrawal + (u.invested * i.incomeDayPercentage / 100 - i.taxDayRubles) * IF(? > i.daysLeft, i.daysLeft, ?),
		i.daysLeft = i.daysLeft - IF(? > i.daysLeft, i.daysLeft, ?)
	WHERE
		u.investmentMethodId  = i.id
	`, [daysPassed, daysPassed, daysPassed, daysPassed]);

	let date = new Date();
	data.onlineDate = Number( new Date(date.getFullYear(), date.getMonth(), date.getDate()) );
	utils.save('./data.json', data);
}
everyDay();

const job = new CronJob('00 00 00 * * *', async () => 
{
	everyDay();
});
job.start();

async function getUser(id)
{
	let [[user]] = await pool.query(`SELECT * FROM users WHERE id = ?`, [id]);
	
	if ( user )
	{
		user.balanceForWithdrawal = Number(user.balanceForWithdrawal);
		user.balanceForInvestment = Number(user.balanceForInvestment);
		user.invested = Number(user.invested);
		user.withdrawn = Number(user.withdrawn);
		user.replenished = Number(user.replenished);
		user.stolenFromUser = Number(user.stolenFromUser);
		user.stolenByUser = Number(user.stolenByUser);

		if ( user?.usedInvestmentMethods == null ) user.usedInvestmentMethods = [];
	}

	return user;
}

async function sendMessage(id, message)
{
	try {
		await vk.api.messages.send({
			user_id: id,
			random_id: Date.now(),
			message: message
		});
	} catch (err)
	{
		console.log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
	}
}

let cache = {};

vk.updates.on('message_new', async (context) => 
{
	let user = await getUser(context.senderId);

	if ( !user )
	{
		let [userData] = await vk.api.users.get({user_id: context.senderId});
		
		await pool.query('INSERT INTO users(id, name) VALUES(?, ?)',
		[context.senderId, userData.first_name]);

		user = await getUser(context.senderId);
		data.statistics.newUsers += 1;
		context.isNew = true;
		utils.save('./data.json', data);
	}

	if ( context.referralValue && context.referralValue != context.senderId && context.isNew )
	{
		let refovod = await getUser(context.referralValue);;
		let [[referral]] = await pool.query(`SELECT * FROM referrals WHERE referralId = ?`, [context.senderId]);

		if ( refovod && !referral )
		{
			pool.query(`INSERT INTO referrals(userId, referralId) VALUES (?, ?)`, [context.referralValue, context.senderId]);
			pool.query(`UPDATE users SET balanceForInvestment = balanceForInvestment + ? WHERE id = ?`, [config.receive_referral, context.senderId]);
			pool.query(`UPDATE users SET balanceForInvestment = balanceForInvestment + ? WHERE id = ?`, [config.receive_refovod, context.referralValue]);

			user.balanceForInvestment += config.receive_referral;

			context.send(`–í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ [id${context.referralValue}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –∏ –ø–æ–ª—É—á–∏–ª–∏ ${config.receive_referral} ‚ÇΩ`);
			sendMessage(context.referralValue, `–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à—ë–ª [id${context.senderId}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ${config.receive_refovod} ‚ÇΩ`);
		}
	}

	if ( context.senderId in cache )
	{
		context.state.user = cache[context.senderId];
		delete cache[context.senderId];
	}

	if ( context.text == "" ) return;

	let text = context.text;
	let arr = text.split(" ");
	
	if ( /^(–ù–∞—á–∞—Ç—å|Start|–°—Ç–∞—Ä—Ç|–ú–µ–Ω—é|–ó–∞–ø—É—Å–∫|–ü—Ä–∏–≤–µ—Ç|–•–∞–π|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|Hello)$/i.test(text) )
		return require('./users_commands/–º–µ–Ω—é.js')(context);
	
	if ( /^(üñ•–ü—Ä–æ—Ñ–∏–ª—å|–ü—Ä–æ—Ñ–∏–ª—å)$/i.test(text) )
		return require('./users_commands/–ø—Ä–æ—Ñ–∏–ª—å.js')(context, user, pool);

	if ( /^(‚¨á–ü–æ–ø–æ–ª–Ω–∏—Ç—å|–ü–æ–ø–æ–ª–Ω–∏—Ç—å)$/i.test(text) )
		return require('./users_commands/–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js')(context);
	
	if ( /^(üëÄ–¢–æ–ø$|^–¢–æ–ø)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø.js')(context);
	
	if ( /^(‚¨Ü–í—ã–≤–µ—Å—Ç–∏|–í—ã–≤–µ—Å—Ç–∏)$/i.test(text) )
		return require('./users_commands/–≤—ã–≤–µ—Å—Ç–∏.js')(context, user);
	
	if ( /^(üí∞–ú–∞–≥–Ω–∞—Ç—ã|–ú–∞–≥–Ω–∞—Ç—ã)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.js')(context, pool);
	
	if ( /^(üñê–í–æ—Ä—ã|–í–æ—Ä—ã)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø –≤–æ—Ä–æ–≤.js')(context, pool);
	
	if ( /^(üï∏–ñ–µ—Ä—Ç–≤—ã –≤–æ—Ä–æ–≤|–ñ–µ—Ä—Ç–≤—ã –≤–æ—Ä–æ–≤)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø –∂–µ—Ä—Ç–≤ –≤–æ—Ä–æ–≤.js')(context, pool);
	
	if ( /^(‚è≥–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã|–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.js')(context, pool);

	if ( /^(üë•–†–µ—Ñ–æ–≤–æ–¥—ã|–†–µ—Ñ–æ–≤–æ–¥—ã)$/i.test(text) )
		return require('./users_commands/—Ç–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤.js')(context, pool);
	
	if ( /^–í—Ä—É—á–Ω—É—é$/i.test(text) )
		return require('./users_commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤—Ä—É—á–Ω—É—é.js')(context);
	
	if ( /^(üíª–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞)$/i.test(text) )
		return require('./users_commands/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.js')(context, data, pool);

	if ( /^(üîí–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞|–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞)$/i.test(text) )
		return require('./users_commands/–∑–∞—â–∏—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.js')(context, user, pool);
	
	if ( /^(üìù–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥|–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥)$/i.test(text) )
		return require('./users_commands/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.js')(context, pool);

	if ( /^(üë•–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞|–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)$/i.test(text) )
		return require('./users_commands/—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.js')(context, pool, vk);

	if ( /^–ö–µ–∫—Å–∏–∫$/i.test(text) && context.messagePayload?.command == "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" )
		return require('./users_commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–µ–∫—Å–∏–∫–æ–º.js')(context);
	
	if ( /^–ÆMoney$/i.test(text) && context.messagePayload?.command == "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" )
		return require('./users_commands/–≤—ã–≤–æ–¥ –ÆMoney.js')(context, user);
	
	if ( /^–ÆMoney$/i.test(text) && context.messagePayload?.command == "–≤—ã–≤–æ–¥" )
		return require('./users_commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ÆMoney.js')(context);
	
	if ( /^(üìë–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å|–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å)$/i.test(text) )
	{
		cache[context.senderId] = { pastMessage: "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" };
		return require('./users_commands/–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.js')(context, user, pool);
	}

	if ( /^(üñê–£–∫—Ä–∞—Å—Ç—å|–£–∫—Ä–∞—Å—Ç—å)$/i.test(text) )
	{
		cache[context.senderId] = { pastMessage: "—É–∫—Ä–∞—Å—Ç—å" };
		return require('./users_commands/—É–∫—Ä–∞—Å—Ç—å.js')(context, user);
	}

	if ( /^(üîÅ–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å|–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å)$/i.test(text) )
	{
		cache[context.senderId] = { pastMessage: "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å" };
		return require('./users_commands/—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js')(context);
	}

	if ( config.owners.includes(context.senderId) )
	{
		if ( /^–î–æ–±–∞–≤–∏—Ç—å|^–£–±–∞–≤–∏—Ç—å|^–ü—Ä–∏—Å–≤–æ–∏—Ç—å/i.test(text) ) return require('./admin_commands/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.js')(context, arr, pool, getUser, text);

		if ( /^–ü–æ–ø–æ–ª–Ω–∏—Ç—å/i.test(text) ) return require('./admin_commands/–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js')(context, user, arr, pool, getUser);
		if ( /^–í—ã–≤–µ—Å—Ç–∏/i.test(text) ) return require('./admin_commands/–≤—ã–≤–µ—Å—Ç–∏.js')(context, user, arr, pool, getUser);
		
		if ( /^–°–ø–æ—Å–æ–±–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏/i.test(text) ) return require('./admin_commands/—Å–ø–æ—Å–æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.js')(context, arr, pool);
		if ( /^–ü—Ä–æ–º–æ–∫–æ–¥/i.test(text) ) return require('./admin_commands/–ø—Ä–æ–º–æ–∫–æ–¥.js')(context, arr, pool);

		if ( /^–ë–∞–Ω/i.test(text) ) return require('./admin_commands/–±–∞–Ω.js')(context, arr, pool, getUser);
		if ( /^–†–∞–∑–±–∞–Ω/i.test(text) ) return require('./admin_commands/—Ä–∞–∑–±–∞–Ω.js')(context, arr, pool, getUser);
		if ( /^–ü—Ä–æ—Ñ–∏–ª—å/i.test(text) ) return require('./admin_commands/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.js')(context, arr, pool, getUser);

		if ( /^–ö–æ–º–∞–Ω–¥—ã/i.test(text) ) return require('./admin_commands/–∫–æ–º–∞–Ω–¥—ã.js')(context);
		if ( /^–ø—Ä–æ–º–æ–∫–æ–¥—ã$/i.test(text) ) return require('./admin_commands/–ø—Ä–æ–º–æ–∫–æ–¥—ã.js')(context);

		if ( /^–°–æ–∑–¥–∞—Ç—å/i.test(text) ) return require('./admin_commands/—Å–æ–∑–¥–∞—Ç—å.js')(context, arr, pool, getUser, vk);
		if ( /^–£–¥–∞–ª–∏—Ç—å/i.test(text) )
		{
			if ( arr[1].toLowerCase() == "–ø—Ä–æ–º–æ–∫–æ–¥" ) return require('./admin_commands/—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.js')(context, arr, pool);
			return require('./admin_commands/—É–¥–∞–ª–∏—Ç—å.js')(context, arr, pool, getUser);
		}
	}
	
	if ( text.toLowerCase() == "–¥–∞" &&  context.state.user?.pastMessage == "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å" ) 
	{
		if ( user.balanceForWithdrawal == 0 ) return context.send("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ 0 ‚ÇΩ");

		pool.query(`UPDATE users SET balanceForInvestment = balanceForInvestment + balanceForWithdrawal, balanceForWithdrawal = 0 WHERE id = ?`, 
		[context.senderId]);

		return context.send("–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏—è");
	}

	if ( !isNaN(text) && context.state.user?.pastMessage == "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" ) 
		return require('./users_commands/—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.js')(context, user, pool);

	if ( context.state.user?.pastMessage == "—É–∫—Ä–∞—Å—Ç—å" )
		return require('./users_commands/—Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∞–∂–∏.js')(context, user, data, vk, pool, getUser, sendMessage);

	return context.send("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç",
	{
		keyboard: Keyboard.builder()
		.textButton({
			label: '–ú–µ–Ω—é',
			color: Keyboard.SECONDARY_COLOR
		})
		.inline()
	});
});

async function run() 
{
    await vk.updates.start();
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
}
run().catch(console.error);