const users = require('./data/users.json');
const data = require('./data/data.json');
const config = require('./config.json');
const utils = require('./utils.js');

const editCommand = require('./function/–∫–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.js');
const createCommand = require('./function/–∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞—Ç—å.js');
const steal = require('./function/—Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∞–∂–∏.js');
const invest = require('./function/—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.js');
const createPromoCode = require('./function/—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.js');

var CronJob = require('cron').CronJob;
const { VK, Keyboard, resolveResource } = require('vk-io');
const { QuestionManager } = require('vk-io-question');

const vk = new VK({
	token: config.group_token,
	pollingGroupId: config.group_id,
	apiMode: 'parallel_selected'
});

const questionManager = new QuestionManager();
vk.updates.use(questionManager.middleware);

const startProfile = JSON.stringify({
	"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
	"balanceForWithdrawal": 0,
	"balanceForInvestment": 0,
	"invested": 0,
	"investmentMethod": null,
	"usedInvestmentMethods": [],
	"withdrawn": 0,
	"replenished": 0,
	"stolenFromUser": 0,
	"stolenByUser": 0,
	"attemptsSteal": 1,
	"ban": false,
	"protection": false
});

for (key in users)
{
	if ( !users[key].hasOwnProperty("protection") ) users[key].protection = false;
}

vk.updates.on('message_new', async (context, next) => 
{
	if ( !users[context.senderId] ) 
	{
		let [userData] = await vk.api.users.get({user_id: context.senderId});
		
		users[context.senderId] = JSON.parse(startProfile);
		users[context.senderId].name = userData.first_name;
		data.statistics.newUsers += 1;
	}

	return next();
});

const DAY = 86400000;

function everyDay()
{
	let day = Math.floor( (Date.now() - data.onlineDate) / DAY );
	if ( day < 1 ) return;

	data.statistics.newUsers = 0;
	data.statistics.weWork += 1;

	for (user in users)
	{
		if( !users[user].attemptsSteal ) users[user].attemptsSteal = 1;
		if ( users[user].protection ) users[user].protection = false;

		if ( users[user].investmentMethod != null ) // –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		{
			let multiplier = (day > users[user].investmentMethod.daysLeft ? users[user].investmentMethod.daysLeft : day);
			let res = users[user].invested * users[user].investmentMethod.incomeDayPercentage / 100 - users[user].investmentMethod.taxDayRubles;
			
			users[user].balanceForWithdrawal = utils.rounding( users[user].balanceForWithdrawal + res * multiplier );
			users[user].investmentMethod.daysLeft -= multiplier;
		}
	}

	let date = new Date();
	data.onlineDate = Number( new Date(date.getFullYear(), date.getMonth(), date.getDate()) );
}
everyDay();

const job = new CronJob('00 00 00 * * *', async () => 
{
	everyDay();
});
job.start();

const commands = [
	{
		regexp: /^–ù–∞—á–∞—Ç—å|Start|–°—Ç–∞—Ä—Ç|–ú–µ–Ω—é|–ó–∞–ø—É—Å–∫|–ü—Ä–∏–≤–µ—Ç|–•–∞–π|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|Hello$/i,
		function: require('./commands/–º–µ–Ω—é.js')
	},
	{
		regexp: /^üñ•–ü—Ä–æ—Ñ–∏–ª—å|–ü—Ä–æ—Ñ–∏–ª—å$/i,
		function: require('./commands/–ø—Ä–æ—Ñ–∏–ª—å.js')
	},
	{
		regexp: /^üìë–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å|–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å$/i,
		function: require('./commands/–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.js')
	},
	{
		regexp: /^üñê–£–∫—Ä–∞—Å—Ç—å|–£–∫—Ä–∞—Å—Ç—å$/i,
		function: require('./commands/—É–∫—Ä–∞—Å—Ç—å.js')
	},
	{
		regexp: /^‚¨á–ü–æ–ø–æ–ª–Ω–∏—Ç—å$|^–ü–æ–ø–æ–ª–Ω–∏—Ç—å$/i,
		function: require('./commands/–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js')
	},
	{
		regexp: /^‚¨Ü–í—ã–≤–µ—Å—Ç–∏|–í—ã–≤–µ—Å—Ç–∏$/i,
		function: require('./commands/–≤—ã–≤–µ—Å—Ç–∏.js')
	},
	{
		regexp: /^üëÄ–¢–æ–ø|–¢–æ–ø$/i,
		function: require('./commands/—Ç–æ–ø.js')
	},
	{
		regexp: /^üí∞–ú–∞–≥–Ω–∞—Ç—ã$/i,
		function: require('./commands/—Ç–æ–ø –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.js')
	},
	{
		regexp: /^üñê–í–æ—Ä—ã$/i,
		function: require('./commands/—Ç–æ–ø –≤–æ—Ä–æ–≤.js')
	},
	{
		regexp: /^üï∏–ñ–µ—Ä—Ç–≤—ã –≤–æ—Ä–æ–≤$/i,
		function: require('./commands/—Ç–æ–ø –∂–µ—Ä—Ç–≤ –≤–æ—Ä–æ–≤.js')
	},
	{
		regexp: /^‚è≥–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã$/i,
		function: require('./commands/—Ç–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.js')
	},
	{
		regexp: /^–í—Ä—É—á–Ω—É—é$/i,
		function: require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤—Ä—É—á–Ω—É—é.js')
	},
	{
		regexp: /^–ö–µ–∫—Å–∏–∫$/i,
		function: require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–µ–∫—Å–∏–∫–æ–º.js'),
		payload: "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
	},
	{
		regexp: /^–ÆMoney$/i,
		function: require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ÆMoney.js'),
		payload: "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
	},
	{
		regexp: /^–ÆMoney$/i,
		function: require('./commands/–≤—ã–≤–æ–¥ –ÆMoney.js'),
		payload: "–≤—ã–≤–æ–¥"
	},
	{
		regexp: /^üîÅ–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å|–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å$/i,
		function: require('./commands/—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js')
	},
	{
		regexp: /^üîí–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞|–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞$/i,
		function: require('./commands/–∑–∞—â–∏—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.js')
	},
	{
		regexp: /^üíª–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞$/i,
		function: require('./commands/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.js')
	}
];

let cache = {};

vk.updates.on('message_new', async (context) => 
{
	let text = context.text;
	let arr;
	try {
		arr = text.split(" ");
	} catch (err) {
		console.log(err, Date.now(), context.senderId)
	}
	let indexInCommands = 
	commands.findIndex(command => command.regexp.test(text) && context.messagePayload?.command == command.payload); // –∏–Ω–¥–µ–∫—Å –∫–æ–º–∞–Ω–¥—ã

	
	if ( /^üìù–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥$/i.test(context.text) )
	{
		let res = await context.question(`–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥...`);
		text = res.text;
		
		if ( !(text in data.promoCodes) ) return context.send("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç");
		if ( data.promoCodes[text].activated.includes(context.senderId) ) return context.send("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥");
		
		data.promoCodes[text].activated.push(context.senderId);
		data.promoCodes[text].numberActivations -= 1;
		let sum = +data.promoCodes[text].amount;
		users[context.senderId].balanceForInvestment = utils.rounding(users[context.senderId].balanceForInvestment + sum);

		if (data.promoCodes[text].numberActivations <= 0) delete data.promoCodes[text];

		return context.send(`–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å—É–º–º—É ${ utils.prettify(sum) } ‚ÇΩ`);
	}
	if ( /^–ø—Ä–æ–º–æ–∫–æ–¥—ã$/i.test(context.text) && config.owners.includes(context.senderId) )
	{

		let res = Object.keys(data.promoCodes).map(el => 
`–ü—Ä–æ–º–æ–∫–æ–¥ "${el}" 
C—É–º–º–∞ ${data.promoCodes[el].amount} ‚ÇΩ 
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π ${data.promoCodes[el].numberActivations}`).join("\n\n");

		return context.send("–ü—Ä–æ–º–æ–∫–æ–¥—ã\n\n" + (res.length == 0 ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" : res));
	}
	if ( /^–ø—Ä–æ–º–æ–∫–æ–¥ /i.test(context.text) && config.owners.includes(context.senderId) )
	{
		return createPromoCode(context, arr, data);
	}
	if (context.text == "–ù–∞—á–∞—Ç—å" && context.messagePayload?.command == 'start')
	{
		return commands[0].function(context);
	}
	if (context.senderId in cache)
	{
		context.state.user = cache[context.senderId];
		delete cache[context.senderId];
	}
	if ( config.owners.includes(context.senderId) )
	{
		if ( /^—Ä–µ–¥$/i.test(arr[0]) ) return editCommand(context, arr, users, startProfile, vk);
		if ( /^—Å–æ–∑–¥–∞—Ç—å$/i.test(arr[0]) ) return createCommand(context, arr, users, startProfile, vk, data);
	}
	if ( !isNaN(text) && context.state.user?.pastMessage == "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å") return invest(context, users, data);
	if ( text.toLowerCase() == "–¥–∞" &&  context.state.user?.pastMessage == "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å") 
	{
		if (users[context.senderId].balanceForWithdrawal == 0) return context.send("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ 0 ‚ÇΩ");

		users[context.senderId].balanceForInvestment = utils.rounding(users[context.senderId].balanceForInvestment + users[context.senderId].balanceForWithdrawal);
		users[context.senderId].balanceForWithdrawal = 0;

		return context.send("–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏—è");
	}
	
	if ( indexInCommands == -1 )
	{
		if ( context.state.user?.pastMessage == "—É–∫—Ä–∞—Å—Ç—å" )
		{
			if ( text in users ) return steal(context, users, data, vk, text);

			const resource = await resolveResource({
            	api: vk.api,
            	resource: text
        	})
			.catch((err) =>
			{
				return context.send("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
			});

			if (resource?.type == 'user')
			{
				if (resource.id in users) return steal(context, users, data, vk, resource.id);

				return context.send("–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ");
			}
		}

		return context.send("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç",
		{
			keyboard: Keyboard.builder()
			.textButton({
				label: '–ú–µ–Ω—é',
				color: Keyboard.SECONDARY_COLOR
			})
			.inline()
		});
	}

	commands[indexInCommands].function(context, users, data); 

	if ( /^üìë–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å|–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å$/i.test(text) ) cache[context.senderId] = { pastMessage: "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" }
	if ( /^üñê–£–∫—Ä–∞—Å—Ç—å|–£–∫—Ä–∞—Å—Ç—å$/i.test(text) ) cache[context.senderId] = { pastMessage: "—É–∫—Ä–∞—Å—Ç—å" }
	if ( /^üîÅ–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å|–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å$/i.test(text) ) cache[context.senderId] = { pastMessage: "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å" }
});

setInterval(() =>
{
    utils.save('./data/data.json', data);
    utils.save('./data/users.json', users);
}, 3000);

async function run() 
{
    await vk.updates.start();
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
}
run().catch(console.error);