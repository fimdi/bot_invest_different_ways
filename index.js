const users = require('./data/users.json');
const data = require('./data/data.json');
const config = require('./config.json');
const utils = require('./utils.js');

const steal = require('./commands/—Ñ—É–Ω–∫—Ü–∏—è –∫—Ä–∞–∂–∏.js');
const invest = require('./commands/—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.js');
const menu = require('./commands/–º–µ–Ω—é.js');
const profile = require('./commands/–ø—Ä–æ—Ñ–∏–ª—å.js');
const investMessage = require('./commands/–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å.js');
const stealMessage = require('./commands/—É–∫—Ä–∞—Å—Ç—å.js');
const replenish = require('./commands/–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js');
const withdraw = require('./commands/–≤—ã–≤–µ—Å—Ç–∏.js');
const top = require('./commands/—Ç–æ–ø.js');
const topBalance = require('./commands/—Ç–æ–ø –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞.js');
const topThieves = require('./commands/—Ç–æ–ø –≤–æ—Ä–æ–≤.js');
const topVictims = require('./commands/—Ç–æ–ø –∂–µ—Ä—Ç–≤ –≤–æ—Ä–æ–≤.js')
const topInvestors = require('./commands/—Ç–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.js');
const manually = require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –≤—Ä—É—á–Ω—É—é.js');
const re_replenishment = require('./commands/—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js');
const statistics = require('./commands/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞.js');
const protectionOfFunds = require('./commands/–∑–∞—â–∏—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.js');
const replenishmentKeksik = require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–µ–∫—Å–∏–∫–æ–º.js');
const replenishmentYooMoney = require('./commands/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ÆMoney.js');
const withdrawalYooMoney = require('./commands/–≤—ã–≤–æ–¥ –ÆMoney.js');
const activatePromoCode = require('./commands/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.js');
const edit = require('./admin_commands/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.js');
const _replenish = require('./admin_commands/–ø–æ–ø–æ–ª–Ω–∏—Ç—å.js');
const _withdraw = require('./admin_commands/–≤—ã–≤–µ—Å—Ç–∏.js');
const _delete = require('./admin_commands/—É–¥–∞–ª–∏—Ç—å.js');
const create = require('./admin_commands/—Å–æ–∑–¥–∞—Ç—å.js');
const promoCode = require('./admin_commands/–ø—Ä–æ–º–æ–∫–æ–¥.js');
const investmentMethod = require('./admin_commands/—Å–ø–æ—Å–æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.js');
const deletePromoCode = require('./admin_commands/—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥.js');
const ban = require('./admin_commands/–±–∞–Ω.js');
const unban = require('./admin_commands/—Ä–∞–∑–±–∞–Ω.js');
const viewProfile = require('./admin_commands/–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.js');
const commands = require('./admin_commands/–∫–æ–º–∞–Ω–¥—ã.js');

var CronJob = require('cron').CronJob;
const { VK, Keyboard } = require('vk-io');
const { QuestionManager } = require('vk-io-question');
const mysql = require('mysql2/promise');

const pool = mysql.createPool({
    host: '141.8.195.65',
    port: 3306,
    user: 'a0672554_Victor',
    password: '59rFx2RvVPGDZ9bq',
    database: 'a0672554_investing_DW_Den',
	charset: 'utf8mb4_general_ci'
});
const vk = new VK({
	token: config.group_token,
	pollingGroupId: config.group_id,
	apiMode: 'parallel_selected'
});

const questionManager = new QuestionManager();
vk.updates.use(questionManager.middleware);

const DAY = 86400000;

function everyDay()
{
	let day = Math.floor( (Date.now() - data.onlineDate) / DAY );
	if ( day < 1 ) return;

	data.statistics.newUsers = 0;
	data.statistics.weWork += 1;

	pool.query('UPDATE users SET attemptsSteal = 1 WHERE attemptsSteal = 0');
	pool.query('UPDATE users SET protection = false WHERE protection = true');
	pool.query(`
	UPDATE 
		users u, 
		usersInvestmentMethods i
	SET
		u.balanceForWithdrawal = u.balanceForWithdrawal + (u.invested * i.incomeDayPercentage / 100 - i.taxDayRubles) * IF(? > i.daysLeft, i.daysLeft, ?),
		i.daysLeft = i.daysLeft - IF(? > i.daysLeft, i.daysLeft, ?)
	WHERE
		u.investmentMethodId  = i.id
	`, [day, day, day, day]);

	let date = new Date();
	data.onlineDate = Number( new Date(date.getFullYear(), date.getMonth(), date.getDate()) );
	utils.save('./data/data.json', data);
}
everyDay();

const job = new CronJob('00 00 00 * * *', async () => 
{
	everyDay();
});
job.start();

let cache = {};

async function getUser(id)
{
	let [[user]] = await pool.query(`SELECT * FROM users WHERE id = ?`, [id]);
	
	if ( user )
	{
		user.balanceForWithdrawal = Number(user.balanceForWithdrawal);
		user.balanceForInvestment = Number(user.balanceForInvestment);
		user.invested = Number(user.invested);
		user.withdrawn = Number(user.withdrawn);
		user.replenished = Number(user.replenished);
		user.stolenFromUser = Number(user.stolenFromUser);
		user.stolenByUser = Number(user.stolenByUser);
	}

	return user;
}

// async function createWayInvestment(method)
// {
// 	let [res] = await pool.query('INSERT INTO usersInvestmentMethods(`number`, `incomeDayPercentage`, `taxDayRubles`, `term`, `daysLeft`) VALUES(?, ?, ?, ?, ?)', 
// 	[method.id, method.incomeDayPercentage, method.taxDayRubles, method.term, method.daysLeft]);

// 	return res.insertId;
// }

// (async () =>
// {
// 	let US = await Promise.all(Object.keys(users).map(async (e) => 
// 	{
// 		return `(${e}, ${ pool.escape(users[e].name) }, ${users[e].balanceForWithdrawal}, ${users[e].balanceForInvestment}, ${users[e].invested}, ${ users[e].investmentMethod == null ? null : await createWayInvestment(users[e].investmentMethod) }, ${ pool.escape(JSON.stringify(users[e].usedInvestmentMethods)) }, ${users[e].withdrawn}, ${users[e].replenished}, ${users[e].stolenFromUser}, ${users[e].stolenByUser}, ${users[e].attemptsSteal}, ${users[e].ban}, ${users[e].protection})`
// 	}));
	
	
// 	await pool.query(`INSERT INTO users(id, name, balanceForWithdrawal, balanceForInvestment, invested, investmentMethodId, usedInvestmentMethods, withdrawn, replenished, stolenFromUser, stolenByUser, attemptsSteal, ban, protection) VALUES\n` + US.join(',\n'))
// })()


vk.updates.on('message_new', async (context) => 
{
	let user = await getUser(context.senderId);

	if ( context.senderId in cache )
	{
		context.state.user = cache[context.senderId];
		delete cache[context.senderId];
	}
	if ( !user )
	{
		let [userData] = await vk.api.users.get({user_id: context.senderId});
		
		await pool.query('INSERT INTO users(id, name) VALUES(?, ?)',
		[context.senderId, userData.first_name]);

		user = await getUser(context.senderId);
	}
	if ( user?.usedInvestmentMethods == null ) user.usedInvestmentMethods = [];
	if ( context.text == "" ) return;

	let text = context.text;
	let arr = text.split(" ");

	if ( /^(–ù–∞—á–∞—Ç—å|Start|–°—Ç–∞—Ä—Ç|–ú–µ–Ω—é|–ó–∞–ø—É—Å–∫|–ü—Ä–∏–≤–µ—Ç|–•–∞–π|–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ|Hello)$/i.test(context.text) )
	{
		return menu(context);
	}
	if ( /^(üñ•–ü—Ä–æ—Ñ–∏–ª—å|–ü—Ä–æ—Ñ–∏–ª—å)$/i.test(context.text) )
	{
		return profile(context, user, pool);
	}
	if ( /^(üìë–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å|–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å)$/i.test(context.text) )
	{
		cache[context.senderId] = { pastMessage: "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å" };
		return investMessage(context, user, pool);
	}
	if ( /^(üñê–£–∫—Ä–∞—Å—Ç—å|–£–∫—Ä–∞—Å—Ç—å)$/i.test(context.text) )
	{
		cache[context.senderId] = { pastMessage: "—É–∫—Ä–∞—Å—Ç—å" };
		return stealMessage(context, user);
	}
	if ( /^(‚¨á–ü–æ–ø–æ–ª–Ω–∏—Ç—å|–ü–æ–ø–æ–ª–Ω–∏—Ç—å)$/i.test(context.text) )
	{
		return replenish(context);
	}
	if ( /^(üëÄ–¢–æ–ø$|^–¢–æ–ø)$/i.test(context.text) )
	{
		return top(context);
	}
	if ( /^(‚¨Ü–í—ã–≤–µ—Å—Ç–∏|–í—ã–≤–µ—Å—Ç–∏)$/i.test(context.text) )
	{
		return withdraw(context, user);
	}
	if ( /^(üí∞–ú–∞–≥–Ω–∞—Ç—ã|–ú–∞–≥–Ω–∞—Ç—ã)$/i.test(context.text) )
	{
		return topBalance(context, pool);
	}
	if ( /^(üñê–í–æ—Ä—ã|–í–æ—Ä—ã)$/i.test(context.text) )
	{
		return topThieves(context, pool);
	}
	if ( /^(üï∏–ñ–µ—Ä—Ç–≤—ã –≤–æ—Ä–æ–≤|–ñ–µ—Ä—Ç–≤—ã –≤–æ—Ä–æ–≤)$/i.test(context.text) )
	{
		return topVictims(context, pool);
	}
	if ( /^(‚è≥–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã|–ò–Ω–≤–µ—Å—Ç–æ—Ä—ã)$/i.test(context.text) )
	{
		return topInvestors(context, pool);
	}
	if ( /^–í—Ä—É—á–Ω—É—é$/i.test(context.text) )
	{
		return manually(context);
	}
	if ( /^(üîÅ–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å|–†–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å)$/i.test(context.text) )
	{
		cache[context.senderId] = { pastMessage: "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å" };
		return re_replenishment(context);
	}
	if ( /^(üíª–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞|–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞)$/i.test(context.text) )
	{
		return statistics(context, data, pool);
	}
	if ( /^(üîí–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞|–ó–∞—â–∏—Ç–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞)$/i.test(context.text) )
	{
		return protectionOfFunds(context, user, pool);
	}
	if ( /^–ö–µ–∫—Å–∏–∫$/i.test(context.text) && context.messagePayload?.command == "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
	{
		return replenishmentKeksik(context);
	}
	if ( /^–ÆMoney$/i.test(context.text) && context.messagePayload?.command == "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ")
	{
		return withdrawalYooMoney(context, user);
	}
	if ( /^–ÆMoney$/i.test(context.text) && context.messagePayload?.command == "–≤—ã–≤–æ–¥")
	{
		return replenishmentYooMoney(context);
	}
	if ( /^(üìù–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥|–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥)$/i.test(context.text) )
	{
		return activatePromoCode(context, pool);
	}
	if ( /^–ø—Ä–æ–º–æ–∫–æ–¥—ã$/i.test(context.text) && config.owners.includes(context.senderId) )
	{

		let [promoCodes] = await pool.query(`SELECT * FROM promoCodes`);

		promoCodes = promoCodes.map(promoCode => 
`–ü—Ä–æ–º–æ–∫–æ–¥ "${promoCode.name}" 
C—É–º–º–∞ ${+promoCode.amount} ‚ÇΩ 
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π ${promoCode.numberActivations}`).join("\n\n");

		return context.send("–ü—Ä–æ–º–æ–∫–æ–¥—ã\n\n" + (promoCodes.length == 0 ? "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç" : promoCodes));
	}

	if ( config.owners.includes(context.senderId) )
	{
		if ( /^–î–æ–±–∞–≤–∏—Ç—å|^–£–±–∞–≤–∏—Ç—å|^–ü—Ä–∏—Å–≤–æ–∏—Ç—å/i.test(text) ) return await edit(context, arr, pool, getUser, text);

		if ( /^–ü–æ–ø–æ–ª–Ω–∏—Ç—å/i.test(text) ) return await _replenish(context, user, arr, pool, getUser);
		if ( /^–í—ã–≤–µ—Å—Ç–∏/i.test(text) ) return await _withdraw(context, user, arr, pool, getUser);
		
		if ( /^–£–¥–∞–ª–∏—Ç—å/i.test(text) )
		{
			if ( arr[1].toLowerCase() == "–ø—Ä–æ–º–æ–∫–æ–¥" ) return await deletePromoCode(context, arr, pool);
			return await _delete(context, arr, pool, getUser);
		}
		if ( /^–°–æ–∑–¥–∞—Ç—å/i.test(text) ) return await create(context, arr, pool, getUser, vk);

		if ( /^–°–ø–æ—Å–æ–±–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏/i.test(text) ) return await investmentMethod(context, arr, pool);
		if ( /^–ü—Ä–æ–º–æ–∫–æ–¥/i.test(text) ) return await promoCode(context, arr, pool);

		if ( /^–ë–∞–Ω/i.test(text) ) return await ban(context, arr, pool, getUser);
		if ( /^–†–∞–∑–±–∞–Ω/i.test(text) ) return await unban(context, arr, pool, getUser);
		if ( /^–ü—Ä–æ—Ñ–∏–ª—å/i.test(text) ) return await viewProfile(context, arr, pool, getUser);

		if ( /^–ö–æ–º–∞–Ω–¥—ã/i.test(text) ) return await commands(context);
	}
	if ( !isNaN(text) && context.state.user?.pastMessage == "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å") return await invest(context, user, pool);
	if ( text.toLowerCase() == "–¥–∞" &&  context.state.user?.pastMessage == "—Ä–µ–ø–æ–ø–æ–ª–Ω–∏—Ç—å") 
	{
		if (user.balanceForWithdrawal == 0) return context.send("–ù–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ 0 ‚ÇΩ");

		pool.query(`UPDATE users SET balanceForInvestment = balanceForInvestment + balanceForWithdrawal, balanceForWithdrawal = 0 WHERE id = ?`, 
		[context.senderId]);

		return context.send("–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç—Ä–æ–≤–∞–Ω–∏—è");
	}
	if ( context.state.user?.pastMessage == "—É–∫—Ä–∞—Å—Ç—å" )
	{
		return steal(context, user, data, vk, pool, getUser);
	}

	return context.send("–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç",
	{
		keyboard: Keyboard.builder()
		.textButton({
			label: '–ú–µ–Ω—é',
			color: Keyboard.SECONDARY_COLOR
		})
		.inline()
	});
});

async function run() 
{
    await vk.updates.start();
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!");
}
run().catch(console.error);